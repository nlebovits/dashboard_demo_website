[
  {
    "objectID": "take_action.html",
    "href": "take_action.html",
    "title": "Take Action",
    "section": "",
    "text": "This project is mainly meant to support “cleaning and greening” to deter gun violence. According to the research that this dashboard is based on , that involves:\n\nRemoving trash and debris\nGrading the land\nPlanting a small number of trees to create a park-like setting\nInstalling low-perimeter (about 1 meter high) fences with multiple ungated entrances to encourage use\nRegularly maintaining the lot\n\nThis approach has been shown to be inexpensive and cost-effective, with costs averaging about $5 per square meter and maintenance averaging $0.50 per square meter thereafter. If you’re not able to take on a full intervention, it’s still worthwhile to install a fence, plant trees, or even simply keep the lot free of trash, which can be done on your own."
  },
  {
    "objectID": "take_action.html#where-can-i-get-help",
    "href": "take_action.html#where-can-i-get-help",
    "title": "Take Action",
    "section": "Where can I get help?",
    "text": "Where can I get help?\nTo carry out something like this, try getting in touch with your local Neighborhood Advisory Committee , a nearby Community Development Corporation , or your local representative . Explain to them what you want to do and why. Show them this map to support your explanation!\nBe mindful of trespassing on private property. You can use the dashboard tool above to identify which lots are privately owned. Consider reaching out to a lot owner and explaining why you want to carry out a lot cleanup in order to get permission.\nLastly, you can also use these data to convince your NAC, CDC, elected official, or another organization to take action. If you are interested in getting specific data that were used to build this tool, contact me and let me know how I can help.\n\nOverview\n\n\nDecision Tree\n\n\nPotential Uses for Parcels"
  },
  {
    "objectID": "take_action.html#things-to-consider",
    "href": "take_action.html#things-to-consider",
    "title": "Take Action",
    "section": "Things to Consider",
    "text": "Things to Consider\n\nFunding\n\n\nLong-Term Maintenance\n\n\nGentrification"
  },
  {
    "objectID": "website-graphics/2023_02_02_vacant_lots_layer.html",
    "href": "website-graphics/2023_02_02_vacant_lots_layer.html",
    "title": "lotsapp_demo_site",
    "section": "",
    "text": "Imports\nFirst, we’ll import the necessary libraries.\n\nimport requests\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import Polygon\nimport matplotlib.pyplot as plt\nimport datetime\nimport io\nimport zipfile\nimport rasterio\nfrom rasterio.plot import show\nimport sklearn\nfrom sklearn.neighbors import KernelDensity\nimport numpy as np\n\nimport collections\n\n# in response to an error importing collections, I used this: https://stackoverflow.com/questions/72032032/importerror-cannot-import-name-iterable-from-collections-in-python\n\nfrom collections.abc import Iterable\n\ncollections.Iterable = collections.abc.Iterable\ncollections.Mapping = collections.abc.Mapping\ncollections.MutableSet = collections.abc.MutableSet\ncollections.MutableMapping = collections.abc.MutableMapping\n\nimport mapclassify\n\nNext, we’ll query the City of Philadelphia data via the ArcGIS REST API using the requests library. We’ll also use the json library to parse the response.\nFinally, we’ll use the geopandas library to create a geodataframe from the response.\nWe have three different datasets to import from the City’s ArcGIS server. These are:\n\n1. Vacant Land\n\n# Define the URL for the Vacant_Indicators_Land feature service\nland_url = 'https://services.arcgis.com/fLeGjb7u4uXqeF9q/ArcGIS/rest/services/Vacant_Indicators_Land/FeatureServer/0/query'\n\n# Define the parameters for the Vacant_Indicators_Land API request\nland_params = {\n    'where': '1=1',\n    'outFields': '*',\n    'returnGeometry': 'true',\n    'f': 'json',\n    'resultRecordCount': 2000 # Number of features to return per request\n}\n\n# Make the Vacant_Indicators_Land API requests\nland_dfs = []\nland_offset = 0\nwhile True:\n    # Add the offset parameter to the API request\n    land_params['resultOffset'] = land_offset\n    land_response = requests.get(land_url, params=land_params)\n    \n    if land_response.status_code == 200:\n        # Convert the Vacant_Indicators_Land JSON data to a geopandas geodataframe; convert to CRS 3857\n        land_data = land_response.json()\n\n        # convert the JSON data to a pandas dataframe\n        land_df = pd.DataFrame(land_data['features'])\n\n        # separate the attributes column into one column per attribute\n        land_df = pd.concat([land_df.drop(['attributes'], axis=1), land_df['attributes'].apply(pd.Series)], axis=1)\n\n        # make the `geometry` column a shapely geometry object\n        land_df['geometry'] = land_df['geometry'].apply(lambda x: Polygon(x['rings'][0]))\n\n        # convert the pandas dataframe to a geopandas geodataframe\n        land_gdf = gpd.GeoDataFrame(land_df, geometry='geometry', crs='EPSG:3857')\n        land_gdf.to_crs(epsg=2272, inplace=True)\n\n        land_dfs.append(land_gdf)\n        land_offset += len(land_gdf)\n        \n        if len(land_gdf) < 2000:\n            break  # If there are fewer than 2000 features returned, it means we have all the data\n        \n    else:\n        print('Vacant_Indicators_Land Request failed with status code:', land_response.status_code)\n        break\n\n# Concatenate the dataframes into a single geodataframe\nland_gdf = gpd.GeoDataFrame(pd.concat(land_dfs, ignore_index=True), crs='EPSG:2272')\n\n\nland_gdf.shape\n\n(26276, 14)\n\n\n\n\n2. Vacant Buildings\n\n# Define the URL for the Vacant_Indicators_Bldg feature service\nbldg_url = 'https://services.arcgis.com/fLeGjb7u4uXqeF9q/ArcGIS/rest/services/Vacant_Indicators_Bldg/FeatureServer/0/query'\n\n# Define the parameters for the Vacant_Indicators_Bldg API request\nbldg_params = {\n    'where': '1=1',\n    'outFields': '*',\n    'returnGeometry': 'true',\n    'f': 'json',\n    'resultRecordCount': 2000 # Number of features to return per request\n}\n\n# Make the Vacant_Indicators_Bldg API requests\nbldg_dfs = []\nbldg_offset = 0\nwhile True:\n    # Add the offset parameter to the API request\n    bldg_params['resultOffset'] = bldg_offset\n    bldg_response = requests.get(bldg_url, params=bldg_params)\n    \n    if bldg_response.status_code == 200:\n        # Convert the Vacant_Indicators_bldg JSON data to a geopandas geodataframe; convert to CRS 3857\n        bldg_data = bldg_response.json()\n\n        # convert the JSON data to a pandas dataframe\n        bldg_df = pd.DataFrame(bldg_data['features'])\n\n        # separate the attributes column into one column per attribute\n        bldg_df = pd.concat([bldg_df.drop(['attributes'], axis=1), bldg_df['attributes'].apply(pd.Series)], axis=1)\n\n        # make the `geometry` column a shapely geometry object\n        bldg_df['geometry'] = bldg_df['geometry'].apply(lambda x: Polygon(x['rings'][0]))\n\n        # convert the pandas dataframe to a geopandas geodataframe\n        bldg_gdf = gpd.GeoDataFrame(bldg_df, geometry='geometry', crs='EPSG:3857')\n        bldg_gdf.to_crs(epsg=2272, inplace=True)\n\n        bldg_dfs.append(bldg_gdf)\n        bldg_offset += len(bldg_gdf)\n        \n        if len(bldg_gdf) < 2000:\n            break  # If there are fewer than 2000 features returned, it means we have all the data\n        \n    else:\n        print('Vacant_Indicators_Bldg Request failed with status code:', bldg_response.status_code)\n        break\n\n# Concatenate the dataframes into a single geodataframe\nbldg_gdf = gpd.GeoDataFrame(pd.concat(bldg_dfs, ignore_index=True), crs='EPSG:2272')\n\n\nbldg_gdf.shape\n\n(9722, 14)\n\n\n\n\nNow, combine the two datasets in preparation for string cleaning.\n\ncolumns = ['geometry', 'ADDRESS', 'BLDG_DESC',\n       'OPA_ID','COUNCILDISTRICT',\n       'ZIPCODE','OWNER1', 'OWNER2']\n\n# reduce gdfs to only the columns we want\nland_gdf = land_gdf[columns]\n\nbldg_gdf = bldg_gdf[columns]\n\nland_gdf['type'] = 'Lot'\n\nbldg_gdf['type'] = 'Building'\n\n\n# bind the two geodataframes together using pandas.concat\nfull_gdf = pd.concat([land_gdf, bldg_gdf], axis=0)\n\n\nfull_gdf.head()\n\n\n\n\n\n  \n    \n      \n      geometry\n      ADDRESS\n      BLDG_DESC\n      OPA_ID\n      COUNCILDISTRICT\n      ZIPCODE\n      OWNER1\n      OWNER2\n      type\n    \n  \n  \n    \n      0\n      POLYGON ((2687288.180 256633.076, 2687182.041 ...\n      3232 HENRY AVE\n      COM.CONDO.1STY MASONRY\n      882921188\n      4\n      19129\n      NEWCOURTLAND ELDER SVCS\n      None\n      Lot\n    \n    \n      1\n      POLYGON ((2675580.787 242097.596, 2675611.032 ...\n      633 N 53RD ST\n      VAC LAND RES < ACRE\n      442316810\n      3\n      19131\n      REDEVELOPMENT AUTHORITY\n      OF PHILADELPHIA\n      Lot\n    \n    \n      2\n      POLYGON ((2694595.619 250002.049, 2694595.572 ...\n      2424 N MOLE ST\n      VAC LAND RES < ACRE\n      161064101\n      5\n      19132\n      REDEVELOPMENT AUTHORITY\n      OF PHILADELPHIA\n      Lot\n    \n    \n      3\n      POLYGON ((2699250.966 246745.116, 2699244.163 ...\n      437 ARLINGTON ST\n      VAC LAND RES < ACRE\n      183194500\n      7\n      19122\n      MCHUGH JOHN\n      None\n      Lot\n    \n    \n      4\n      POLYGON ((2695073.865 251698.897, 2695026.121 ...\n      2735 N HICKS ST\n      VAC LAND RES < ACRE\n      111168200\n      8\n      19132\n      HERBERT MITCHELL\n      VICTORIA\n      Lot\n    \n  \n\n\n\n\n\n\nNow we’ll apply string cleaning to the OWNER1 and OWNER2 columns to identify public vs. private ownership.\n\npublic_owners = ['PHILADELPHIA LAND BANK',\n                'PHILADELPHIA HOUSING AUTH',\n                'CITY OF PHILA',\n                'REDEVELOPMENT AUTHORITY OF PHILADELPHIA',\n                'CITY OF PHILADELPHIA',\n                'DEPT OF PUBLC PROP; CITY OF PHILA',\n                'DEPT OF PUBLIC PROP; CITY OF PHILA',\n                'DEPT PUB PROP; CITY OF PHILA',\n                'REDEVELOPMENT AUTHORITY OF PHILA',\n                'PHILA REDEVELOPMENT AUTH',\n                'PHILADELPHIA LAND INVESTM',\n                'REDEVELOPMENT AUTHORITY O',\n                'PHILADELPHIA REDEVELOPMEN',\n                'PHILA HOUSING AUTHORITY',\n                'KENSINGTON HOUSING AUTHOR',\n                'DEVELOPMENT CORPORATION; PHILADELPHIA HOUSING',\n                'PHILA REDEVELOPMENT AUTHO',\n                'DEPT OF PUB PROP; CITY OF PHILA',\n                'PHILA HOUSING DEV CORP',\n                'DEP OF PUB PROP; CITY OF PHILA',\n                'REDEVELOPMENT AUTHORITY',\n                'COMMONWEALTH OF PA',\n                'COMMONWEALTH OF PENNA',\n                'DEPT OF PUBLIC PROP; CITY OF PHILADELPHIA',\n                'DEPT PUBLIC PROP R E DIV; CITY OF PHILA',\n                'PUBLIC PROP DIV; CITY OF PHILA',\n                'PUBLIC PROP REAL ESTATE; CITY OF PHILA',\n                'REAL ESTATE DIV; CITY OF PHILA',\n                'REAL ESTATE DIVISION; CITY OF PHILA',\n                'URBAN DEVELOPMENT; SECRETARY OF HOUSING'\n                'URBAN DEVELOPMENT; SECRETARY OF HOUSING AND',\n                'PHILADELPHIA REDEVELOPMENT AUTHORITY',\n                'PHILADELPHIA REDEVELOPMENT AUTH',\n                'PHILADELPHIA HOUSING AUTHORITY',\n                'PHILADELPHIA LAND BANK',\n                'REDEVELOPMENT AUTHORITY OF PHILADELPHIA',\n                'PHILADELPHIA HOUSING AUTHORITY',\n                'CITY OF PHILADELPHIA',\n                'CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROPERTY',\n                'REDEVELOPMENT AUTHORITY OF PHILADELPHIA',\n                'PHILADELPHIA LAND INVESTMENT',\n                'PHILADELPHIA REDEVELOPMENT AUTHORITY',\n                'PHILADELPHIA HOUSING AUTHORITY',\n                'KENSINGTON HOUSING AUTHORITY',\n                'PHILADELPHIA HOUSING DEVELOPMENT CORPORATION',\n                'REDEVELOPMENT AUTHORITY OF PHILADELPHIA',\n                'CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROPERTY',\n                'PHILADELPHIA HOUSING DEVELOPMENT CORPORATION',\n                'CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROPERTY',\n                'REDEVELOPMENT AUTHORITY OF PHILADELPHIA',\n                'COMMONWEALTH OF PENNSYLVANIA',\n                'CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROPERTY',\n                'SECRETARY OF HOUSING AND URBAN DEVELOPMENT',\n                'REDEVELOPMENT AUTHORITY OF PHILADELPHIA',\n                'PHILADELPHIA LAND INVESTMENT',\n                'CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROPERTY',\n                'PENNDOT'\n]\n\n# return unique public_owners\npublic_owners = list(set(public_owners))\n\n\n# create a new column that combines the OWNER1 and OWNER2 columns according to the following rules:\n# if OWNER1 is not null and OWNER2 is null, then the new column is OWNER1\n# if OWNER1 is null and OWNER2 is not null, then the new column is OWNER2\n# if OWNER2 starts with a preposition, then the new column is OWNER1 + OWNER2 separated by a space\n# if OWNER2 does not start with a preposition, then the new column is OWNER2 + OWNER1 separated by a se\n\n\n# define a function to check if a string starts with a preposition\ndef starts_with_preposition(string):\n    prepositions = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'for', 'from', 'in', 'into', 'nor', 'of', 'on', 'or', 'so', 'the', 'to', 'up', 'yet']\n    if string.split(' ')[0].lower() in prepositions:\n        return True\n    else:\n        return False\n    \n# define a function to combine the OWNER1 and OWNER2 columns\ndef combine_owners(row):\n    if pd.isnull(row['OWNER1']) and pd.isnull(row['OWNER2']):\n        return None\n    elif pd.isnull(row['OWNER1']) and not pd.isnull(row['OWNER2']):\n        return row['OWNER2']\n    elif not pd.isnull(row['OWNER1']) and pd.isnull(row['OWNER2']):\n        return row['OWNER1']\n    elif starts_with_preposition(row['OWNER2']):\n        return row['OWNER1'] + ' ' + row['OWNER2']\n    else:\n        return row['OWNER2'] + '; ' + row['OWNER1']\n    \n# apply the combine_owners function to the full_gdf dataframe\nfull_gdf['OWNER'] = full_gdf.apply(combine_owners, axis=1)\n\n# if OWNER is 'PHILADELPHIA HOUSING AUTH' or 'PHILA HOUSING AUTHORITY', replace with 'PHILADELPHIA HOUSING AUTHORITY'\nfull_gdf.loc[full_gdf['OWNER'] == 'PHILADELPHIA HOUSING AUTH', 'OWNER'] = 'PHILADELPHIA HOUSING AUTHORITY'\nfull_gdf.loc[full_gdf['OWNER'] == 'PHILA HOUSING AUTHORITY', 'OWNER'] = 'PHILADELPHIA HOUSING AUTHORITY'\n\n# redevelopment authority typos\nredev_owner_variations = ['REDEVELOPMENT AUTHORITY OF PHILA', 'PHILA REDEVELOPMENT AUTH',\n'REDEVELOPMENT AUTHORITY O', 'PHILADELPHIA REDEVELOPMEN',\n'PHILA REDEVELOPMENT AUTHO', 'REDEVELOPMENT AUTHORITY',\n'REDEVELOPMENT AUTH']\n\nfor var in redev_owner_variations:\n    full_gdf.loc[full_gdf['OWNER'] == var, 'OWNER'] = 'REDEVELOPMENT AUTHORITY OF PHILADELPHIA'\n\n# department of public property typos\ndpp_owner_variations = ['DEPT OF PUBLIC PROPERTY', 'DEPT OF PUBLIC PROPERT', 'DEPT OF PUBLC PROP; CITY OF PHILA',\n                        'DEPT OF PUBLIC PROP; CITY OF PHILA', 'DEPT OF PUBLIC PROPERTY; CITY OF PHILA', 'DEPT PUB PROP; CITY OF PHILA',\n                        'DEPT OF PUB PROP; CITY OF PHILA', 'DEP OF PUB PROP; CITY OF PHILA', 'DEPT OF PUBLIC PROP; CITY OF PHILADELPHIA',\n                        'DEPT PUBLIC PROP R E DIV; CITY OF PHILA', 'PUBLIC PROP DIV; CITY OF PHILA', 'PUBLIC PROP REAL ESTATE; CITY OF PHILA',\n                        'REAL ESTATE DIV; CITY OF PHILA', 'REAL ESTATE DIVISION; CITY OF PHILA']\n\nfor var in dpp_owner_variations:\n    full_gdf.loc[full_gdf['OWNER'] == var, 'OWNER'] = 'CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROPERTY'\n\n# HUD\nfull_gdf.loc[full_gdf['OWNER'] == 'URBAN DEVELOPMENT; SECRETARY OF HOUSING', 'OWNER'] = 'SECRETARY OF HOUSING AND URBAN DEVELOPMENT'\nfull_gdf.loc[full_gdf['OWNER'] == 'URBAN DEVELOPMENT; SECRETARY OF HOUSING AND', 'OWNER'] = 'SECRETARY OF HOUSING AND URBAN DEVELOPMENT'\n\n# commonwealth of pennsylvania\nfull_gdf.loc[full_gdf['OWNER'] == 'COMMONWEALTH OF PA', 'OWNER'] = 'COMMONWEALTH OF PENNSYLVANIA'\nfull_gdf.loc[full_gdf['OWNER'] == 'COMMONWEALTH OF PENNA', 'OWNER'] = 'COMMONWEALTH OF PENNSYLVANIA'\n\n# phdc\nfull_gdf.loc[full_gdf['OWNER'] == 'DEVELOPMENT CORPORATION; PHILADELPHIA HOUSING', 'OWNER'] = 'PHILADELPHIA HOUSING DEVELOPMENT CORPORATION'\nfull_gdf.loc[full_gdf['OWNER'] == 'PHILA HOUSING DEV CORP', 'OWNER'] = 'PHILADELPHIA HOUSING DEVELOPMENT CORPORATION'\n\n# PennDOT\nfull_gdf.loc[full_gdf['OWNER'] == 'DEPARTMENT OF TRANSPORTAT; COMMONWEALTH OF PENNSYLVA', 'OWNER'] = 'PENNDOT'\n\n# city of Philadelphia\nfull_gdf.loc[full_gdf['OWNER'] == 'CITY OF PHILADELPHIA', 'OWNER'] = 'CITY OF PHILA'\n\n# create a new column called 'public_owner' that is True if the OWNER column is in the public_owners list\nfull_gdf['public_owner'] = full_gdf['OWNER'].isin(public_owners)\n\n# drop the OWNER1 and OWNER2 columns\nfull_gdf = full_gdf.drop(['OWNER1', 'OWNER2'], axis=1)\n\n\n# randomly sample ten rows from the full_gdf dataframe\nfull_gdf.sample(10)\n\n\n\n\n\n  \n    \n      \n      geometry\n      ADDRESS\n      BLDG_DESC\n      OPA_ID\n      COUNCILDISTRICT\n      ZIPCODE\n      type\n      OWNER\n      public_owner\n    \n  \n  \n    \n      18052\n      POLYGON ((2693106.146 249095.661, 2693103.774 ...\n      2229 N 19TH ST\n      VAC LAND RES < ACRE\n      162071000\n      5\n      19132\n      Lot\n      ZALAZAR DAIANA YANET\n      False\n    \n    \n      10132\n      POLYGON ((2700280.334 254460.781, 2700277.951 ...\n      3335 N 5TH ST\n      VAC LAND COMM. < ACRE\n      193128500\n      7\n      19140\n      Lot\n      MIKAYLA DEVELOPMENTS LLC\n      False\n    \n    \n      16394\n      POLYGON ((2690289.242 268893.213, 2690235.576 ...\n      5850 MORTON ST\n      VAC LAND RES < ACRE\n      591189000\n      8\n      19144\n      Lot\n      GIBBONS WAYNE L\n      False\n    \n    \n      3143\n      POLYGON ((2688076.800 250300.184, 2688074.916 ...\n      2306 N 30TH ST\n      VAC LAND RES < ACRE\n      282075200\n      5\n      19132\n      Lot\n      PRIME MINISTER NORTH LLC\n      False\n    \n    \n      25400\n      POLYGON ((2679069.891 245014.285, 2678877.560 ...\n      4724-28 PARKSIDE AVE\n      VAC LAND COMM. < ACRE\n      885595780\n      4\n      19131\n      Lot\n      C & K ENTERPRISES CO LLC\n      False\n    \n    \n      8784\n      POLYGON ((2695032.794 240371.855, 2695036.866 ...\n      1208 LEMON ST\n      VAC LAND RES < ACRE\n      141279200\n      5\n      19123\n      Lot\n      KLZ PROPERTY LLC\n      False\n    \n    \n      7345\n      POLYGON ((2700182.387 250263.232, 2700181.917 ...\n      2613 N 4TH ST\n      ROW 3 STY MASONRY\n      192130100\n      7\n      19133\n      Building\n      MARRERO-RIOS LEWIS F\n      False\n    \n    \n      4517\n      POLYGON ((2696262.084 239266.301, 2696244.005 ...\n      909 BUTTONWOOD ST\n      PARKING LOT COMMERCIAL\n      885052120\n      1\n      19123\n      Lot\n      CITY OF PHILA\n      True\n    \n    \n      13269\n      POLYGON ((2694004.850 243414.457, 2694002.667 ...\n      1218 N 15TH ST\n      VAC LAND RES < ACRE\n      471188510\n      5\n      19121\n      Lot\n      CITY OF PHILA\n      True\n    \n    \n      1267\n      POLYGON ((2700548.705 258183.000, 2700546.832 ...\n      4009 N REESE ST\n      ROW 2 STY MASONRY\n      433042200\n      7\n      19140\n      Building\n      TOMLIN TORRI\n      False\n    \n  \n\n\n\n\n\n\n3. PHS Community Landcare Parcels\nNow we can import the PHS Community LandCare parcels and spatially join them to our full_gdf, which contains all of the vacant parcels in the city (both lots and buildings).\n\n# Define the URL for the PHS_CommunityLandcare feature service\nphs_landcare_url = 'https://services.arcgis.com/fLeGjb7u4uXqeF9q/ArcGIS/rest/services/PHS_CommunityLandcare/FeatureServer/0/query'\n\n# Define the parameters for the PHS_CommunityLandcare API request\nphs_landcare_params = {\n    'where': '1=1',\n    'outFields': '*',\n    'returnGeometry': 'true',\n    'f': 'json',\n    'resultRecordCount': 2000 # Number of features to return per request\n}\n\n# Make the PHS_CommunityLandcare API requests\nphs_dfs = []\nphs_offset = 0\nwhile True:\n    # Add the offset parameter to the API request\n    phs_landcare_params['resultOffset'] = phs_offset\n    phs_landcare_response = requests.get(phs_landcare_url, params=phs_landcare_params)\n    \n    if phs_landcare_response.status_code == 200:\n        # Convert the PHS_CommunityLandcare JSON data to a geopandas geodataframe; convert to CRS 3857\n        phs_landcare_data = phs_landcare_response.json()\n\n        # convert the JSON data to a pandas dataframe\n        phs_landcare_df = pd.DataFrame(phs_landcare_data['features'])\n\n        # separate the attributes column into one column per attribute\n        phs_landcare_df = pd.concat([phs_landcare_df.drop(['attributes'], axis=1), phs_landcare_df['attributes'].apply(pd.Series)], axis=1)\n\n        # make the `geometry` column a shapely geometry object\n        phs_landcare_df['geometry'] = phs_landcare_df['geometry'].apply(lambda x: Polygon(x['rings'][0]))\n\n        # convert the pandas dataframe to a geopandas geodataframe\n        phs_landcare_gdf = gpd.GeoDataFrame(phs_landcare_df, geometry='geometry', crs='EPSG:3857')\n        phs_landcare_gdf.to_crs(epsg=2272, inplace=True)\n\n        phs_dfs.append(phs_landcare_gdf)\n        phs_offset += len(phs_landcare_gdf)\n        \n        if len(phs_landcare_gdf) < 2000:\n            break  # If there are fewer than 2000 features returned, it means we have all the data\n        \n    else:\n        print('PHS_CommunityLandcare Request failed with status code:', phs_landcare_response.status_code)\n        break\n\n# Concatenate the dataframes into a single geodataframe\nphs_landcare_gdf = gpd.GeoDataFrame(pd.concat(phs_dfs, ignore_index=True), crs='EPSG:2272')\n\nphs_cols = ['geometry', 'COMM_PARTN']\n\nphs_landcare_gdf = phs_landcare_gdf[phs_cols]\n\n\nphs_landcare_gdf.shape\n\n(2263, 2)\n\n\n\n# spatially join phs_landcare_gdf to full_gdf\njoined_gdf = gpd.sjoin(full_gdf, phs_landcare_gdf, how='left', predicate='intersects')\n\n# drop the index_right column and the ADDRESS_right column\njoined_gdf = joined_gdf.drop(['index_right'], axis=1)\n\njoined_gdf['COMM_PARTN'] = joined_gdf['COMM_PARTN'].fillna('None', inplace=True)\n\n\njoined_gdf.columns\n\nIndex(['geometry', 'ADDRESS', 'BLDG_DESC', 'OPA_ID', 'COUNCILDISTRICT',\n       'ZIPCODE', 'type', 'OWNER', 'public_owner', 'COMM_PARTN'],\n      dtype='object')\n\n\nNow we need to import two more datasets from the City’s Carto database (SQL).\n\n\n1. L&I Complaints\n\n# Calculate one year ago from today's date\none_year_ago = (datetime.datetime.now() - datetime.timedelta(days=365)).strftime(\"%Y-%m-%d\")\n\n# Create the SQL query\ncomplaints_sql_query = \"SELECT address, service_request_id, subject, status, service_name, service_code, lat, lon FROM public_cases_fc WHERE requested_datetime >= '{}'\".format(one_year_ago)\n\n# Make the GET request\ncomplaints_response = requests.get(\"https://phl.carto.com/api/v2/sql\", params={\"q\": complaints_sql_query})\n\n# Get the data\ncomplaints_data = complaints_response.json()[\"rows\"]\n\n# convert complaints_data to a pandas dataframe\ncomplaints_df = pd.DataFrame(complaints_data)\n\n# Convert the data to a geopandas dataframe\ncomplaints_gdf = gpd.GeoDataFrame(complaints_df, geometry=gpd.points_from_xy(complaints_df.lon, complaints_df.lat), crs='EPSG:2272')\n\n# drop the lat and lon columns\ncomplaints_gdf.drop(['lat', 'lon'], axis=1, inplace=True)\n\n# filter for only Status = 'Open'\ncomplaints_gdf = complaints_gdf[complaints_gdf['status'] == 'Open']\n\n# collapse complaints_gdf by address and concatenate the violationcodetitle values into a list with a semicolon separator\ncomplaints_gdf = complaints_gdf.groupby('address')['service_name'].apply(lambda x: '; '.join([val for val in x if val is not None])).reset_index()\n\n# rename the column to 'li_complaints'\ncomplaints_gdf.rename(columns={'service_name': 'li_complaints'}, inplace=True)\n\n\ncomplaints_gdf.shape\n\n(45241, 2)\n\n\n\n\n2. L&I Code Violations\n\n# Calculate one year ago from today's date\none_year_ago = (datetime.datetime.now() - datetime.timedelta(days=365)).strftime(\"%Y-%m-%d\")\n\n# Create the SQL query\nviolations_sql_query = \"SELECT parcel_id_num, casenumber, casecreateddate, casetype, casestatus, violationnumber, violationcodetitle, violationstatus, opa_account_num, address, opa_owner, geocode_x, geocode_y FROM violations WHERE violationdate >= '{}'\".format(one_year_ago)\n\n# Make the GET request\nviolations_response = requests.get(\"https://phl.carto.com/api/v2/sql\", params={\"q\": violations_sql_query})\n\n# Get the data\nviolations_data = violations_response.json()[\"rows\"]\n\n# convert violations_data to a pandas dataframe\nviolations_df = pd.DataFrame(violations_data)\n\n# Convert the data to a geopandas dataframe\nviolations_gdf = gpd.GeoDataFrame(violations_df, geometry=gpd.points_from_xy(violations_df.geocode_x, violations_df.geocode_y), crs='EPSG:2272')\n\n# drop the lat and lon columns\nviolations_gdf.drop(['geocode_x', 'geocode_y'], axis=1, inplace=True)\n\n# filter for only cases where the casestatus is 'IN VIOLATION' or 'UNDER INVESTIGATION'\nviolations_gdf = violations_gdf[(violations_gdf['violationstatus'] == 'OPEN')]\n\n# collapse violations_gdf by address and concatenate the violationcodetitle values into a list with a semicolon separator\nviolations_gdf = violations_gdf.groupby('opa_account_num')['violationcodetitle'].apply(lambda x: '; '.join([val for val in x if val is not None])).reset_index()\n\n# rename the column to 'li_violations'\nviolations_gdf.rename(columns={'violationcodetitle': 'li_code_violations'}, inplace=True)\n\n\nviolations_gdf.shape\n\n(11190, 2)\n\n\n\n# left join the complaints_gdf to the joined_gdf on address\njoined_gdf = joined_gdf.merge(complaints_gdf, how='left', left_on='ADDRESS', right_on='address')\n\n# left join the violations_gdf to the joined_gdf on opa_account_num\njoined_gdf = joined_gdf.merge(violations_gdf, how='left', left_on='OPA_ID', right_on='opa_account_num')\n\n# drop the address and opa_account_num columns\njoined_gdf.drop(['address', 'opa_account_num'], axis=1, inplace=True)\n\n\n\nNext, we’ll add a centroids column to the joined_gdf in order to make it easier to cleanly join neighborhoods, RCOs, tree canopy, and guncrime data.\nJoining by points rather than polygons makes it far less likely that a point straddles two polygons, which make the join ambiguous and potentially incorrect.\n\n# add a column for centroids geometry to use for joins and to extrct raster values\njoined_gdf['centroid'] = joined_gdf['geometry'].centroid\n\n# create a geodata of polygon geoms and opa_id\npoly_gdf = joined_gdf[['OPA_ID', 'geometry']]\n\n# drop the 'geometry' column from joined_gdf\njoined_gdf.drop(['geometry'], axis=1, inplace=True)\n\n# set the 'centroid' column as the geometry column\njoined_gdf.set_geometry('centroid', inplace=True)\n\n\n\nImport Philadelphia’s Neighborhoods from Azavea\n\nhoods_url = 'https://github.com/azavea/geo-data/raw/master/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.zip'\n\nhoods_response = requests.get(hoods_url)\n\nwith io.BytesIO(hoods_response.content) as f:\n    with zipfile.ZipFile(f, 'r') as zip_ref:\n        zip_ref.extractall(\"path/to/destination/folder\")\n        \nhoods = gpd.read_file(\"path/to/destination/folder/Neighborhoods_Philadelphia.shp\")\n\nhoods = hoods.to_crs(epsg=2272)\n\n\njoined_gdf = gpd.sjoin(joined_gdf, hoods, how='left', predicate='intersects')\n\njoined_gdf = joined_gdf.drop(['index_right', 'NAME', 'LISTNAME', 'Shape_Leng', 'Shape_Area'], axis=1)\n\njoined_gdf.rename(columns={'MAPNAME': 'neighborhood'}, inplace=True)\n\n\n\nImport RCOs from the City\n\n# Define the URL for the RCOs feature service\nrcos_url = 'https://services.arcgis.com/fLeGjb7u4uXqeF9q/ArcGIS/rest/services/Zoning_RCO/FeatureServer/0/query'\n\n# Define the parameters for the RCOs API request\nrcos_params = {\n    'where': '1=1',\n    'outFields': '*',\n    'returnGeometry': 'true',\n    'f': 'json'\n}\n\n# Make the RCOs API request\nrcos_response = requests.get(rcos_url, params=rcos_params)\n\n# Check if the RCOs request was successful\nif rcos_response.status_code == 200:\n    # Convert the RCOs JSON data to a geopandas geodataframe; convert to CRS 3857\n    rcos_data = rcos_response.json()\n\n    # convert the JSON data to a pandas dataframe\n    rcos_df = pd.DataFrame(rcos_data['features'])\n\n    # separate the attributes column into one column per attribute\n    rcos_df = pd.concat([rcos_df.drop(['attributes'], axis=1), rcos_df['attributes'].apply(pd.Series)], axis=1)\n\nelse:\n    print('RCOs Request failed with status code:', rcos_response.status_code)\n\n\n# make the `geometry` column a shapely geometry object\nrcos_df['geometry'] = rcos_df['geometry'].apply(lambda x: Polygon(x['rings'][0]))\n\n\n # convert the pandas dataframe to a geopandas geodataframe\nrcos_gdf = gpd.GeoDataFrame(rcos_df, geometry='geometry', crs='EPSG:3857')\n\nrcos_gdf.to_crs(epsg=2272, inplace=True)\n\nrcos_cols = ['geometry', 'ORGANIZATION_NAME', 'ORGANIZATION_ADDRESS',\n       'ORG_TYPE', 'PREFFERED_CONTACT_METHOD',\n       'PRIMARY_NAME', 'PRIMARY_ADDRESS', 'PRIMARY_EMAIL', 'PRIMARY_PHONE',\n       'EXPIRATIONYEAR']\n\n# convert primary_phone and expirationyear to strings\nrcos_gdf['PRIMARY_PHONE'] = rcos_gdf['PRIMARY_PHONE'].astype(str)\nrcos_gdf['EXPIRATIONYEAR'] = rcos_gdf['EXPIRATIONYEAR'].astype(str)\n\n\nrco_aggregate_cols = ['ORGANIZATION_NAME', 'ORGANIZATION_ADDRESS', 'PRIMARY_EMAIL', 'PRIMARY_PHONE']\n\nrcos_gdf[\"rco_info\"] = rcos_gdf[rco_aggregate_cols].agg(\"; \".join, axis=1)\n\n\nrcos_final_cols = ['geometry', 'rco_info']\n\nrcos_gdf = rcos_gdf[rcos_final_cols]\n\n\n\nNow we can join the RCOs to the joined_gdf.\n\n# spatially join rcos_gdf to joined_gdf\nw_rcos_gdf = gpd.sjoin(joined_gdf, rcos_gdf, how='left', predicate='within')\n\n# drop the index_right column\nw_rcos_gdf = w_rcos_gdf.drop(['index_right'], axis=1)\n\n# change MAPNAME to neighborhood\n\nw_rcos_gdf.rename(columns={'rco_info': 'rco_info'}, inplace=True)\n\n# remove duplicates by OPA_ID\nw_rcos_gdf = w_rcos_gdf.drop_duplicates(subset='OPA_ID')\n\n\n# plot w_rcos_gdf\nw_rcos_gdf.shape\n\n(35850, 14)\n\n\n\n# make OPA_ID a string\nw_rcos_gdf['OPA_ID'] = w_rcos_gdf['OPA_ID'].astype(str)\n\n# collapse w_rcos_gdf by opa_id and concatenate the rco_info values into a list with a | separator\nrcos_by_opa_id_gdf = w_rcos_gdf.groupby('OPA_ID')['rco_info'].apply(lambda x: '| '.join([str(val) for val in x if val is not None])).reset_index()\n\n# rename the column to 'relevant_rcos'\nrcos_by_opa_id_gdf.rename(columns={'rco_info': 'relevant_rcos'}, inplace=True)\n\n\nrcos_by_opa_id_gdf.shape\n\n(35850, 2)\n\n\n\n# left join the rcos_by_opa_id_gdf to the joined_gdf on opa_id\njoined_gdf = joined_gdf.merge(rcos_by_opa_id_gdf, how='left', left_on='OPA_ID', right_on='OPA_ID')\n\n# drop duplicate rows\njoined_gdf = joined_gdf.drop_duplicates(subset='OPA_ID')\n\n\njoined_gdf.shape\n\n(35850, 14)\n\n\n\njoined_gdf.sample(5)\n\n\n\n\n\n  \n    \n      \n      ADDRESS\n      BLDG_DESC\n      OPA_ID\n      COUNCILDISTRICT\n      ZIPCODE\n      type\n      OWNER\n      public_owner\n      COMM_PARTN\n      li_complaints\n      li_code_violations\n      centroid\n      neighborhood\n      relevant_rcos\n    \n  \n  \n    \n      23581\n      1220 W DAUPHIN ST\n      VAC LAND RES < ACRE\n      371328101\n      5\n      19133\n      Lot\n      REDEVELOPMENT AUTHORITY OF PHILADELPHIA\n      True\n      None\n      NaN\n      NaN\n      POINT (2696141.397 248938.784)\n      Hartranft\n      Asociacion Puertorriquenos En Marcha (APM); 60...\n    \n    \n      12001\n      1638 S BAILEY ST\n      VAC LAND RES < ACRE\n      364277500\n      2\n      19145\n      Lot\n      BATTAGLINI GINA\n      False\n      None\n      NaN\n      NaN\n      POINT (2686602.937 228613.833)\n      Grays Ferry\n      Grays Ferry Community Council; 1501 s. 29th St...\n    \n    \n      25517\n      1008 W VENANGO ST\n      VAC LAND COMM. < ACRE\n      885509160\n      5\n      19140\n      Lot\n      CATIC INC\n      False\n      None\n      NaN\n      NaN\n      POINT (2698166.073 255934.534)\n      Franklinville\n      Nicetown-Tioga Improvement Team; 3621 N 11th S...\n    \n    \n      7727\n      3510 N 11TH ST\n      VAC LAND RES < ACRE\n      432138600\n      5\n      19140\n      Lot\n      COOK CHRISTINE; FENDERSON BERNARD\n      False\n      None\n      NaN\n      NaN\n      POINT (2697655.664 255734.882)\n      Franklinville\n      Nicetown-Tioga Improvement Team; 3621 N 11th S...\n    \n    \n      25135\n      2430 N BODINE ST\n      VAC LAND RES < ACRE\n      191167518\n      7\n      19133\n      Lot\n      RIDGEWOOD GLOBAL INVESTMENT LLC\n      False\n      None\n      NaN\n      NaN\n      POINT (2700362.817 249249.250)\n      West Kensington\n      Zulu Nation RCO; 2045 N Lawrence Street\\r\\nPhi...\n    \n  \n\n\n\n\n\n\nFinally, tree canopy data.\n\ntree_url = 'https://national-tes-data-share.s3.amazonaws.com/national_tes_share/pa.zip.zip'\n\ntree_response = requests.get(tree_url)\n\nwith io.BytesIO(tree_response.content) as f:\n    with zipfile.ZipFile(f, 'r') as zip_ref:\n        zip_ref.extractall(\"path/to/destination/folder\")\n        \npa = gpd.read_file(\"path/to/destination/folder/pa.shp\")\n\npa = pa.to_crs(epsg=2272)\n\nphl = pa[pa['county'] == 'Philadelphia County']\n\ntree_cols = ['tc_gap', 'geometry']\n\nphl = phl[tree_cols]\n\nphl.rename(columns={'tc_gap': 'tree_canopy_gap'}, inplace=True)\n\nphl.head()\n\n\n\n\n\n  \n    \n      \n      tree_canopy_gap\n      geometry\n    \n  \n  \n    \n      5395\n      0.216832\n      POLYGON ((2698038.313 234970.868, 2697586.173 ...\n    \n    \n      5396\n      0.196093\n      POLYGON ((2699640.691 237442.051, 2699638.100 ...\n    \n    \n      5397\n      0.297005\n      POLYGON ((2696855.043 237339.498, 2696827.290 ...\n    \n    \n      5398\n      0.346134\n      POLYGON ((2693798.320 238055.129, 2693725.464 ...\n    \n    \n      5399\n      0.097603\n      POLYGON ((2689575.081 237146.348, 2689561.703 ...\n    \n  \n\n\n\n\n\n# spatially join phl to joined_gdf\njoined_gdf = gpd.sjoin(joined_gdf, phl, how='left', predicate='intersects')\n\njoined_gdf = joined_gdf.drop(['index_right'], axis=1)\n\n# drop duplicate opa_ids\njoined_gdf = joined_gdf.drop_duplicates(subset='OPA_ID')\n\n\njoined_gdf.shape\n\n(35850, 15)\n\n\n\njoined_gdf.head()\n\n\n\n\n\n  \n    \n      \n      ADDRESS\n      BLDG_DESC\n      OPA_ID\n      COUNCILDISTRICT\n      ZIPCODE\n      type\n      OWNER\n      public_owner\n      COMM_PARTN\n      li_complaints\n      li_code_violations\n      centroid\n      neighborhood\n      relevant_rcos\n      tree_canopy_gap\n    \n  \n  \n    \n      0\n      3232 HENRY AVE\n      COM.CONDO.1STY MASONRY\n      882921188\n      4\n      19129\n      Lot\n      NEWCOURTLAND ELDER SVCS\n      False\n      None\n      NaN\n      NaN\n      POINT (2687670.347 256881.319)\n      Allegheny West\n      East Falls Community Council; PO Box 12672, 19...\n      0.230223\n    \n    \n      1\n      633 N 53RD ST\n      VAC LAND RES < ACRE\n      442316810\n      3\n      19131\n      Lot\n      REDEVELOPMENT AUTHORITY OF PHILADELPHIA\n      True\n      None\n      NaN\n      NaN\n      POINT (2675594.486 242078.492)\n      Haddington\n      Parkside Association; Parkside Evans Recreatio...\n      0.104381\n    \n    \n      2\n      2424 N MOLE ST\n      VAC LAND RES < ACRE\n      161064101\n      5\n      19132\n      Lot\n      REDEVELOPMENT AUTHORITY OF PHILADELPHIA\n      True\n      None\n      NaN\n      NaN\n      POINT (2694579.519 249996.821)\n      Stanton\n      Uptown Entertainment and Development Corporati...\n      0.165151\n    \n    \n      3\n      437 ARLINGTON ST\n      VAC LAND RES < ACRE\n      183194500\n      7\n      19122\n      Lot\n      MCHUGH JOHN\n      False\n      None\n      NaN\n      NaN\n      POINT (2699241.653 246723.548)\n      West Kensington\n      Zulu Nation RCO; 2045 N Lawrence Street\\r\\nPhi...\n      0.199069\n    \n    \n      4\n      2735 N HICKS ST\n      VAC LAND RES < ACRE\n      111168200\n      8\n      19132\n      Lot\n      VICTORIA; HERBERT MITCHELL\n      False\n      None\n      NaN\n      NaN\n      POINT (2695050.897 251708.887)\n      Stanton\n      Tioga United, Inc.; 1539 W. Venango Street \\r\\...\n      0.327281\n    \n  \n\n\n\n\n\n# plot the joined_gdf\njoined_gdf.plot()\n\n<AxesSubplot: >\n\n\n\n\n\n\n\n\nGun Crimes\nFor our gun crime kernel density estimate, we have two steps:\n\n1. Import gun crime data from the City’s Carto database (SQL):\n\n# Modify the SQL query\nguncrime_sql_query = \"SELECT text_general_code, dispatch_date, point_x, point_y FROM incidents_part1_part2 WHERE dispatch_date_time >= '{}' AND text_general_code IN ('Aggravated Assault Firearm', 'Robbery Firearm')\".format(one_year_ago)\n\n# Make the GET request\nguncrime_response = requests.get(\"https://phl.carto.com/api/v2/sql\", params={\"q\": guncrime_sql_query})\n\n# Get the data\nguncrime_data = guncrime_response.json()[\"rows\"]\n\n# convert guncrime_data to a pandas dataframe\nguncrime_df = pd.DataFrame(guncrime_data)\n\n# Convert the data to a geopandas dataframe\nguncrime_gdf = gpd.GeoDataFrame(guncrime_df, geometry=gpd.points_from_xy(guncrime_df.point_x, guncrime_df.point_y), crs='EPSG:4326')\n\n# drop the lat and lon columns\nguncrime_gdf.drop(['point_x', 'point_y'], axis=1, inplace=True)\n\n# convert the geometry column to a CRS 2272\nguncrime_gdf.to_crs(epsg=2272, inplace=True)\n\n# drop null geometry values\nguncrime_gdf = guncrime_gdf[guncrime_gdf['geometry'].notnull()]\n\nc:\\Users\\Nissim\\.conda\\envs\\vac_props_guncrime_dash\\Lib\\site-packages\\geopandas\\geoseries.py:751: UserWarning: GeoSeries.notna() previously returned False for both missing (None) and empty geometries. Now, it only returns False for missing values. Since the calling GeoSeries contains empty geometries, the result has changed compared to previous versions of GeoPandas.\nGiven a GeoSeries 's', you can use '~s.is_empty & s.notna()' to get back the old behaviour.\n\nTo further ignore this warning, you can do: \nimport warnings; warnings.filterwarnings('ignore', 'GeoSeries.notna', UserWarning)\n  return self.notna()\n\n\n\nguncrime_gdf.head()\n\n\n\n\n\n  \n    \n      \n      text_general_code\n      dispatch_date\n      geometry\n    \n  \n  \n    \n      0\n      Robbery Firearm\n      2022-09-11\n      POINT (2697059.540 255757.300)\n    \n    \n      1\n      Aggravated Assault Firearm\n      2022-10-11\n      POINT (2674606.387 241816.289)\n    \n    \n      2\n      Robbery Firearm\n      2022-08-24\n      POINT (2707412.090 249356.412)\n    \n    \n      3\n      Robbery Firearm\n      2022-10-02\n      POINT (2702434.816 265367.796)\n    \n    \n      4\n      Robbery Firearm\n      2022-08-19\n      POINT (2726676.221 264105.934)\n    \n  \n\n\n\n\n\nguncrime_gdf.shape\n\n(6523, 3)\n\n\n\n\n2. Create a kernel density estimate from the gun crime data:\nNote that, rather than following the one mile bandwidth used in the original research, I’m using an adaptive bandwidth based on Silverman’s rule to account for varying local densities. Silverman’s is more robust than Scott’s method as well. I’m implementing this in scipy’s gaussian_kde function.\n, B., 1986. Density estimation for statistic and data analysis. London, UK: Chapman and Hall. https://ned.ipac.caltech.edu/level5/March02/Silverman/paper.pdf.\nNote that ArcGIS Pro implements Silverman’s Rule of Thumb: https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-analyst/how-kernel-density-works.htm\nHowever, I really need to look into this more to make sure that I’ve implemented it correctly. The distribution of my data is non-parametric, meaning that neither Scott’s nor Silverman’s methods are appropriate.\n\nfrom scipy.stats import gaussian_kde\n\n# Get X and Y coordinates of well points\nx_sk = guncrime_gdf[\"geometry\"].x\ny_sk = guncrime_gdf[\"geometry\"].y\n\n# drop null values\nx_sk = x_sk.dropna()\ny_sk = y_sk.dropna()\n\n# Get minimum and maximum coordinate values of well points\nmin_x_sk, min_y_sk, max_x_sk, max_y_sk = guncrime_gdf.total_bounds\n\n# Create a cell mesh grid\n# Horizontal and vertical cell counts should be the same\nXX_sk, YY_sk = np.mgrid[min_x_sk:max_x_sk:100j, min_y_sk:max_y_sk:100j]\n\n# Create 2-D array of the coordinates (paired) of each cell in the mesh grid\npositions_sk = np.vstack([XX_sk.ravel(), YY_sk.ravel()])\n\n# Create 2-D array of the coordinate values of the well points\nXtrain_sk = np.vstack([x_sk, y_sk])\n\n# Estimate the bandwidth using Silverman's rule, which is more robust than Scott's\nkde_sk = gaussian_kde(Xtrain_sk, bw_method='silverman')\n\n# Evaluate the estimator on coordinate pairs\nZ_sk = kde_sk(positions_sk)\n\n# Reshape the data to fit mesh grid\nZ_sk = Z_sk.reshape(XX_sk.shape)\n\n\nimport seaborn as sns\n\nsns.kdeplot(Z_sk.ravel())\n\n<AxesSubplot: ylabel='Density'>\n\n\n\n\n\n\n# plot Z_sk\nplt.figure(figsize=(10,10))\nplt.imshow(np.rot90(Z_sk), cmap=plt.cm.gist_earth_r, extent=[min_x_sk, max_x_sk, min_y_sk, max_y_sk])\nplt.plot(x_sk, y_sk, 'k.', markersize=2)\nplt.title('Estimated density of gun crimes in Philadelphia')\nplt.show()\n\n\n\n\n\ntoday = datetime.datetime.today().strftime('%Y_%m_%d')\n\n\ndef export_kde_raster(Z, XX, YY, min_x, max_x, min_y, max_y, proj, filename):\n    '''Export and save a kernel density raster.'''\n\n    # Flip array vertically and rotate 270 degrees\n    Z_export = np.rot90(np.flip(Z, 0), 3)\n\n    # Get resolution\n    xres = (max_x - min_x) / len(XX)\n    yres = (max_y - min_y) / len(YY)\n\n    # Set transform\n    transform = rasterio.Affine.translation(min_x - xres / 2, min_y - yres / 2) * rasterio.Affine.scale(xres, yres)\n\n    # Export array as raster\n    with rasterio.open(\n            filename,\n            mode = \"w\",\n            driver = \"GTiff\",\n            height = Z_export.shape[0],\n            width = Z_export.shape[1],\n            count = 1,\n            dtype = Z_export.dtype,\n            crs = proj,\n            transform = transform,\n    ) as new_dataset:\n            new_dataset.write(Z_export, 1)\n\n# Export raster\nkde_filename = f\"C:/Users/Nissim/Desktop/Vacant Lots Project/guncrime_kde_rast_{today}.tif\"\nexport_kde_raster(Z = Z_sk, XX = XX_sk, YY = YY_sk,\n                  min_x = min_x_sk, max_x = max_x_sk, min_y = min_y_sk, max_y = max_y_sk,\n                  proj = 2272, filename = kde_filename)\n\nCPLE_AppDefinedError: Deleting C:/Users/Nissim/Desktop/Vacant Lots Project/guncrime_kde_rast_2023_03_02.tif failed: Permission denied\n\n\n\nsrc = rasterio.open(kde_filename)\n\n\nfrom rasterio.plot import show\n\nfix, ax = plt.subplots(figsize=(10, 10))\n\nextent = (src.bounds.left, src.bounds.right, src.bounds.bottom, src.bounds.top)\nax = rasterio.plot.show(src, extent=extent, ax=ax, cmap='Blues')\n\njoined_gdf.plot(ax=ax)\n\n<AxesSubplot: >\n\n\n\n\n\n\ncoord_list = [(x,y) for x,y in zip(joined_gdf['centroid'].x, joined_gdf['centroid'].y)]\n\njoined_gdf['guncrime_density'] = [x for x in src.sample(coord_list)]\n\n# convert 'guncrime_density' column to float\njoined_gdf['guncrime_density'] = joined_gdf['guncrime_density'].astype(float)\n\n\n# plot the centroids with the guncrime density as the color\njoined_gdf.plot(column='guncrime_density', cmap='Reds', legend=True)\n\n<AxesSubplot: >\n\n\n\n\n\nReclassify data into percentiles.\n\nguncrime_classifier = mapclassify.Percentiles(joined_gdf['guncrime_density'], pct=[50, 75, 90, 95, 99, 100])\n\njoined_gdf['guncrime_density'] = joined_gdf[['guncrime_density']].apply(guncrime_classifier)\n\njoined_gdf['guncrime_density'] = joined_gdf['guncrime_density'].replace([0, 1, 2, 3, 4, 5], ['Bottom 50%', 'Top 50%', 'Top 25%', 'Top 10%', 'Top 5%', 'Top 1%'])\n\n\n# need to triple check that I'm calculating this right--is it absolute value?\n\ntree_classifier = mapclassify.Percentiles(joined_gdf['tree_canopy_gap'], pct=[50, 75, 90, 95, 99, 100])\n\njoined_gdf['tree_canopy_gap'] = joined_gdf[['tree_canopy_gap']].apply(tree_classifier)\n\njoined_gdf['tree_canopy_gap'] = joined_gdf['tree_canopy_gap'].replace([0, 1, 2, 3, 4, 5], ['Bottom 50%', 'Top 50%', 'Top 25%', 'Top 10%', 'Top 5%', 'Top 1%'])\n\n\njoined_gdf.head()\n\n\n\n\n\n  \n    \n      \n      ADDRESS\n      BLDG_DESC\n      OPA_ID\n      COUNCILDISTRICT\n      ZIPCODE\n      type\n      OWNER\n      public_owner\n      COMM_PARTN\n      li_complaints\n      li_code_violations\n      centroid\n      neighborhood\n      relevant_rcos\n      tree_canopy_gap\n      guncrime_density\n    \n  \n  \n    \n      0\n      3232 HENRY AVE\n      COM.CONDO.1STY MASONRY\n      882921188\n      4\n      19129\n      Lot\n      NEWCOURTLAND ELDER SVCS\n      False\n      None\n      NaN\n      NaN\n      POINT (2687670.347 256881.319)\n      Allegheny West\n      East Falls Community Council; PO Box 12672, 19...\n      Top 50%\n      Bottom 50%\n    \n    \n      1\n      633 N 53RD ST\n      VAC LAND RES < ACRE\n      442316810\n      3\n      19131\n      Lot\n      REDEVELOPMENT AUTHORITY OF PHILADELPHIA\n      True\n      None\n      NaN\n      NaN\n      POINT (2675594.486 242078.492)\n      Haddington\n      Parkside Association; Parkside Evans Recreatio...\n      Bottom 50%\n      Top 50%\n    \n    \n      2\n      2424 N MOLE ST\n      VAC LAND RES < ACRE\n      161064101\n      5\n      19132\n      Lot\n      REDEVELOPMENT AUTHORITY OF PHILADELPHIA\n      True\n      None\n      NaN\n      NaN\n      POINT (2694579.519 249996.821)\n      Stanton\n      Uptown Entertainment and Development Corporati...\n      Bottom 50%\n      Top 5%\n    \n    \n      3\n      437 ARLINGTON ST\n      VAC LAND RES < ACRE\n      183194500\n      7\n      19122\n      Lot\n      MCHUGH JOHN\n      False\n      None\n      NaN\n      NaN\n      POINT (2699241.653 246723.548)\n      West Kensington\n      Zulu Nation RCO; 2045 N Lawrence Street\\r\\nPhi...\n      Top 50%\n      Top 50%\n    \n    \n      4\n      2735 N HICKS ST\n      VAC LAND RES < ACRE\n      111168200\n      8\n      19132\n      Lot\n      VICTORIA; HERBERT MITCHELL\n      False\n      None\n      NaN\n      NaN\n      POINT (2695050.897 251708.887)\n      Stanton\n      Tioga United, Inc.; 1539 W. Venango Street \\r\\...\n      Top 10%\n      Top 1%\n    \n  \n\n\n\n\n\n# now join the poly_gdf back to the joined_gdf on the opa_id column\njoined_gdf = joined_gdf.join(poly_gdf.set_index('OPA_ID'), on='OPA_ID')\n\n# drop the 'centroids' column\njoined_gdf = joined_gdf.drop(columns=['centroid'])\n\n# make 'geometry' the geometry column\njoined_gdf = joined_gdf.set_geometry('geometry')\n\n\n# set all column names to lowercase\njoined_gdf.columns = map(str.lower, joined_gdf.columns)\n\n\njoined_gdf.shape\n\n(35998, 16)\n\n\n\n# loop through joined_gdf and return one row per guncrime_density category\nguncrime_df = pd.DataFrame()\nfor i in joined_gdf['guncrime_density'].unique():\n    temp_df = joined_gdf[joined_gdf['guncrime_density'] == i]\n    guncrime_df = guncrime_df.append(temp_df.sample(n=1))\n\nguncrime_df.head(10)\n\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3508243800.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  guncrime_df = guncrime_df.append(temp_df.sample(n=1))\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3508243800.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  guncrime_df = guncrime_df.append(temp_df.sample(n=1))\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3508243800.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  guncrime_df = guncrime_df.append(temp_df.sample(n=1))\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3508243800.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  guncrime_df = guncrime_df.append(temp_df.sample(n=1))\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3508243800.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  guncrime_df = guncrime_df.append(temp_df.sample(n=1))\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3508243800.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  guncrime_df = guncrime_df.append(temp_df.sample(n=1))\n\n\n\n\n\n\n  \n    \n      \n      address\n      bldg_desc\n      opa_id\n      councildistrict\n      zipcode\n      type\n      owner\n      public_owner\n      comm_partn\n      li_complaints\n      li_code_violations\n      neighborhood\n      relevant_rcos\n      tree_canopy_gap\n      guncrime_density\n      geometry\n    \n  \n  \n    \n      34466\n      2522 S MILLICK ST\n      ROW 2 STY MASONRY\n      402050300\n      2\n      19142\n      Building\n      PRIDGEN EDWARD K\n      False\n      None\n      NaN\n      NaN\n      Elmwood\n      Eastwick Friends & Neighbors Coalition; 7720 O...\n      Top 25%\n      Bottom 50%\n      POLYGON ((2676852.904 225949.755, 2676846.512 ...\n    \n    \n      7608\n      2466 FRANKFORD AVE\n      VAC LAND COMM. < ACRE\n      885371200\n      1\n      19125\n      Lot\n      TAKANASHI SACHIKO; EBBETT ELLIOTT\n      False\n      None\n      NaN\n      NaN\n      East Kensington\n      East Kensington Neighbors Association; 2439 Am...\n      Top 25%\n      Top 50%\n      POLYGON ((2703644.816 247580.065, 2703635.366 ...\n    \n    \n      27610\n      2851 STOUTON ST\n      ROW 2 STY MASONRY\n      252542300\n      7\n      19134\n      Building\n      JAMES JANO\n      False\n      None\n      NaN\n      ID STRUCTURE; ARCHITECT/ENGINEER SERVICES; EXT...\n      Richmond\n      Impact Community Development Corporation; 1952...\n      Bottom 50%\n      Top 5%\n      POLYGON ((2705261.551 250661.868, 2705251.437 ...\n    \n    \n      24673\n      2953 N HICKS ST\n      VAC LAND RES < ACRE\n      111170100\n      8\n      19132\n      Lot\n      PHILADELPHIA LAND BANK\n      True\n      None\n      NaN\n      NaN\n      Glenwood\n      Tioga United, Inc.; 1539 W. Venango Street \\r\\...\n      Top 10%\n      Top 1%\n      POLYGON ((2695344.745 252954.266, 2695342.832 ...\n    \n    \n      19027\n      1907 W DAUPHIN ST\n      VAC LAND RES < ACRE\n      162247901\n      5\n      19132\n      Lot\n      CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROP...\n      True\n      None\n      NaN\n      NaN\n      Stanton\n      Temple Area Property Association (TAPA); 1639 ...\n      Bottom 50%\n      Top 10%\n      POLYGON ((2692987.748 249463.277, 2692972.892 ...\n    \n    \n      28548\n      2711 N TAYLOR ST\n      ROW 2 STY MASONRY\n      281014800\n      4\n      19132\n      Building\n      MAC DEVELOPMENT GROUP LLC\n      False\n      None\n      NaN\n      NaN\n      Allegheny West\n      28th Democratic Ward; 2521 N. 30th Street\\r\\nP...\n      Bottom 50%\n      Top 25%\n      POLYGON ((2690834.849 252131.168, 2690832.589 ...\n    \n  \n\n\n\n\n\nguncrime_df.columns\n\nIndex(['address', 'bldg_desc', 'opa_id', 'councildistrict', 'zipcode', 'type',\n       'owner', 'public_owner', 'comm_partn', 'li_complaints',\n       'li_code_violations', 'neighborhood', 'relevant_rcos',\n       'tree_canopy_gap', 'guncrime_density', 'geometry'],\n      dtype='object')\n\n\n\npct_cmap = {\n    'Bottom 50%': '#00876c',\n    'Top 50%': '#61a96e',\n    'Top 25%': '#aac872',\n    'Top 10%': '#f5af5c', \n    'Top 5%' : '#ea784d',\n    'Top 1%': '#d43d51'\n}\n\n\n# solution found here: https://www.earthdatascience.org/courses/scientists-guide-to-plotting-data-in-python/plot-spatial-data/customize-vector-plots/python-customize-map-legends-geopandas/\n\n# Plot data\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Loop through each attribute type and plot it using the colors assigned in the dictionary\nfor ctype, data in joined_gdf.groupby('guncrime_density'):\n    \n    # Define the color for each group using the dictionary\n    color = pct_cmap[ctype]\n    \n    # Plot each group using the color defined above\n    data.plot(color=color,\n              ax=ax,\n              label=ctype)\n\n\nax.set(title='Philadelphia Vacant Land by Gun Crime')\n# Place legend in the lower right hand corner of the plot\nax.legend(loc='lower right',\n          fontsize=15,\n          frameon=True)\n\nax.set_axis_off()\nplt.show()\n\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\3075049704.py:20: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  ax.legend(loc='lower right',\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n# Plot data\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Loop through each attribute type and plot it using the colors assigned in the dictionary\nfor ctype, data in joined_gdf.groupby('tree_canopy_gap'):\n    \n    # Define the color for each group using the dictionary\n    color = pct_cmap[ctype]\n    \n    # Plot each group using the color defined above\n    data.plot(color=color,\n              ax=ax,\n              label=ctype)\n\nax.legend(bbox_to_anchor=(1.0, .5), prop={'size': 12})\nax.set(title='Philadelphia Vacant Land by Tree Canopy Gap')\n\nax.set_axis_off()\nplt.show()\n\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_59672\\420939947.py:15: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  ax.legend(bbox_to_anchor=(1.0, .5), prop={'size': 12})\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n# reproject to 4326 for mapping\njoined_gdf = joined_gdf.to_crs(epsg=4326)\n\n# simplify the geometry\njoined_gdf['geometry'] = joined_gdf['geometry'].simplify(5)\n\n\njoined_gdf.shape\n\n(35998, 16)\n\n\n\n# need to add a column for lot size (total area)\n# the can convert geoms to points\n\n# remember--originally wanted to display lots and buildings with separate icons. Do I still want to?\n\n\n# write the joined_gdf to a geojson\njoined_gdf.to_file(\"C:/Users/Nissim/Desktop/Vacant Lots Project/vacant-lots-proj/vacancy_guncrime_dash/joined_gdf.geojson\", driver='GeoJSON')"
  },
  {
    "objectID": "website-graphics/2023_02_22_pz_lots_data.html",
    "href": "website-graphics/2023_02_22_pz_lots_data.html",
    "title": "lotsapp_demo_site",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n\n# read in joined_gdf\nurl = \"C:/Users/Nissim/Desktop/Vacant Lots Project/vacant-lots-proj/vacancy_guncrime_dash/joined_gdf.geojson\"\njoined_gdf = gpd.read_file(url).to_crs(epsg=2272)\n\n# import the promise zone shapefile\npz_gdf = gpd.read_file('C:/Users/Nissim/Desktop/Vacant Lots Project/Philadelphia_Promise_Zone.shp').to_crs(epsg=2272)\n\n# clip the joined_gdf to the promise zone\npz_gdf = gpd.clip(joined_gdf, pz_gdf)\n\n\n# solution found here: https://www.earthdatascience.org/courses/scientists-guide-to-plotting-data-in-python/plot-spatial-data/customize-vector-plots/python-customize-map-legends-geopandas/\n\npct_cmap = {\n    'Bottom 50%': '#00876c',\n    'Top 50%': '#aac872',\n    'Top 25%': '#f7e382',\n    'Top 10%': '#f5af5c', \n    'Top 5%' : '#ea784d',\n    'Top 1%': '#d43d51'\n}\n\n\n# Plot data\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# Loop through each attribute type and plot it using the colors assigned in the dictionary\nfor ctype, data in pz_gdf.groupby('tree_canopy_gap'):\n    \n    # Define the color for each group using the dictionary\n    color = pct_cmap[ctype]\n    \n    # Plot each group using the color defined above\n    data.plot(color=color,\n              ax=ax,\n              label=ctype)\n\n\nax.set(title='Promise Zone Vacant Land by Tree Canopy Gap')\n# Place legend in the lower right hand corner of the plot\nax.legend(loc='lower right',\n          fontsize=15,\n          frameon=True)\n\nax.set_axis_off()\nplt.show()\n\nC:\\Users\\Nissim\\AppData\\Local\\Temp\\ipykernel_46908\\2168369860.py:30: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  ax.legend(loc='lower right',\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\npz_gdf[(pz_gdf['tree_canopy_gap'] == 'Top 5%') | (pz_gdf['tree_canopy_gap'] == 'Top 1%')]\n\n\n\n\n\n  \n    \n      \n      address\n      bldg_desc\n      opa_id\n      councildistrict\n      zipcode\n      type\n      owner\n      public_owner\n      comm_partn\n      li_complaints\n      li_code_violations\n      neighborhood\n      relevant_rcos\n      tree_canopy_gap\n      guncrime_density\n      geometry\n    \n  \n  \n    \n      33409\n      3631 WARREN ST\n      ROW 3 STY MASONRY\n      241046500\n      3\n      19104\n      Building\n      SOLIMAN AWATI F H/W; SOLIMAN ABDEL A\n      False\n      NaN\n      NaN\n      NaN\n      University City\n      Powelton Village Civic Association; P.O. Box 7...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2684741.559 238043.584 0.000, 2684...\n    \n    \n      31418\n      3801 LANCASTER AVE\n      STR/OFF+APTS 3STY MASONRY\n      871402175\n      3\n      19104\n      Building\n      GOSNELL K B\n      False\n      NaN\n      Construction Complaints; Maintenance Complaint...\n      INTERIOR DEMOLITION; PARTIAL DEMOLITION; PARTI...\n      Powelton\n      Powelton Village Civic Association; P.O. Box 7...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2684074.369 238853.625 0.000, 2684...\n    \n    \n      27555\n      3712 BARING ST\n      SEMI/DET 3 STY MASONRY\n      241165800\n      3\n      19104\n      Building\n      WM A & ELIZ COX\n      False\n      NaN\n      NaN\n      ID STRUCTURE; ROOF DEFICIENCIES; INTERIOR UNSA...\n      Powelton\n      Powelton Village Civic Association; P.O. Box 7...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2684334.343 238824.771 0.000, 2684...\n    \n    \n      26936\n      701-41 N 48TH ST\n      SCHOOL 3STY MASONRY\n      783707600\n      3\n      19139\n      Building\n      SCHOOL DISTRICT OF PHILA\n      False\n      NaN\n      NaN\n      EXTERIOR AREA WEEDS; EXIT SIGNS\\r\\n; PERIODIC ...\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2678907.338 240040.254 0.000, 2678...\n    \n    \n      17372\n      800 N 46TH ST\n      VAC LAND COMM. < ACRE\n      885088900\n      3\n      19139\n      Lot\n      SOPHIA AND DAD LLC\n      False\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679286.703 240923.654 0.000, 2679...\n    \n    \n      6440\n      808 N 46TH ST\n      VAC LAND RES < ACRE\n      062373700\n      3\n      19139\n      Lot\n      CITY LAND DEVELOPMENT LLC\n      False\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679278.740 240985.813 0.000, 2679...\n    \n    \n      19648\n      820 N MARKOE ST\n      VAC LAND RES < ACRE\n      062397110\n      3\n      19139\n      Lot\n      PHILADELPHIA HOUSING AUTHORITY\n      True\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679011.834 241034.152 0.000, 2679...\n    \n    \n      33900\n      820 JUNE ST\n      ROW 2 STY MASONRY\n      886810226\n      3\n      19139\n      Building\n      PHILADELPHIA HOUSING AUTHORITY\n      True\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679159.081 241064.294 0.000, 2679...\n    \n    \n      12101\n      4646 PARRISH ST\n      VAC LAND RES < ACRE\n      062058210\n      3\n      19139\n      Lot\n      REDEVELOPMENT AUTHORITY OF PHILADELPHIA\n      True\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2678837.394 241034.522 0.000, 2678...\n    \n    \n      21715\n      4642-44 PARRISH ST\n      VAC LAND RES < ACRE\n      062058100\n      3\n      19139\n      Lot\n      CHURCH; MOUNT HOPE BAPTIST\n      False\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2678856.863 241037.557 0.000, 2678...\n    \n    \n      12251\n      4638-40 PARRISH ST\n      VAC LAND COMM. < ACRE\n      885068560\n      3\n      19139\n      Lot\n      CHURCH; MOUNT HOPE BAPTIST\n      False\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2678891.923 241042.047 0.000, 2678...\n    \n    \n      20949\n      838 N 46TH ST\n      VAC LAND RES < ACRE\n      062375210\n      3\n      19139\n      Lot\n      CITY OF PHILADELPHIA DEPARTMENT OF PUBLIC PROP...\n      True\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679249.514 241213.949 0.000, 2679...\n    \n    \n      23408\n      840 N 46TH ST\n      VAC LAND RES < ACRE\n      062375300\n      3\n      19139\n      Lot\n      WARING JONATHAN K\n      False\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679247.566 241229.158 0.000, 2679...\n    \n    \n      3810\n      842 N 46TH ST\n      VAC LAND COMM. < ACRE\n      885088940\n      3\n      19139\n      Lot\n      WARING JONATHAN W\n      False\n      NaN\n      NaN\n      NaN\n      Mill Creek\n      Mill Creek Advisory Council; 4700 Brown Street...\n      Top 5%\n      Bottom 50%\n      POLYGON Z ((2679245.532 241245.028 0.000, 2679..."
  },
  {
    "objectID": "website-graphics/sample_joined_gdf.html",
    "href": "website-graphics/sample_joined_gdf.html",
    "title": "lotsapp_demo_site",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\n\nurl = \"C:/Users/Nissim/Desktop/Vacant Lots Project/vacant-lots-proj/vacancy_guncrime_dash/joined_gdf.geojson\"\n\ngdf = gpd.read_file(url)\n\ngdf_sample = gdf.sample(frac = 0.01)\n\ngdf_sample.shape\n\ngdf_sample.to_file(\"C:/Users/Nissim/Desktop/Vacant Lots Project/vacant-lots-proj/vacancy_guncrime_dash/joined_gdf_sample.geojson\", driver='GeoJSON')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Vacant Properties Dashboard",
    "section": "",
    "text": "The interface allows users to view every single vacant or abandoned property in Philadelphia. Users can search, zoom, filter, and export data. Every property is listed along with ownership data, the importance of intervention based on gun crime rates (“priority level”), how the property can be legally acquired, and other relevant info such as price and the relevant RCO.\n\nPhiladelphia has a gun violence problem.\nPhiladelphia has roughly 40,000 vacant parcels.\nResearch shows that cleaning and greening abandoned lots and buildings reduces gun crime by as much as 29%.\nIdentifying the highest-priority vacant properties will allow community groups to invest their limited resources where they will have the biggest impact.\nEvery property in Philadelphia can be classified as high, medium, or low priority based on the rate of nearby gun crime and the relative level of tree canopy cover.\nUsing a decision tree, it’s possible to identify the ideal acquisition process for every abandoned property in Philadelphia.\nWe can focus on high-priority properties that are relatively easy to acquire."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Philadelphia has a gun violence problem. Homicides have been on the rise since 2013. The past three years—2020, 2021, and 2022—have been the deadliest on record, with a high of 562 homicides in 2021. Community members need solutions, but many city-run initiatives are frustratingly slow or inadequate. Nearly 80% of the city’s anti-violence spending focuses on long-term violence reduction without any clear, immediate impact.\n\n\n\nAnnual gun crimes"
  },
  {
    "objectID": "about.html#attribution",
    "href": "about.html#attribution",
    "title": "About",
    "section": "Attribution",
    "text": "Attribution\nThis dashboard was built by Nissim Lebovits. He is a master's student in city planning at the University of Pennsylvania's Weitzman School of Design, where he focuses on environmental planning and spatial analysis. He's interested in using data to foster civic engagement and build more sustainable, inclusive cities. Previously he was an AmeriCorps VISTA with the City of Philadelphia, where he worked to support residents of the West Philadelphia Promise Zone. For questions about this dashboard, to see more of his work, or to hire him to support your community organization's data work, please see his website."
  },
  {
    "objectID": "about.html#research",
    "href": "about.html#research",
    "title": "About",
    "section": "Research",
    "text": "Research\nResearch shows that greening and cleaning vacant and abandoned parcels is one of the most impactful, cost-effective interventions available to reduce gun violence in a neighborhood.\nDrs. Eugenia South and Charles Branas have led several studies that demonstrate that greening vacant lots in Philadelphia reduced gun violence by as much as 29% in the surrounding area. Similarly, cleaning and lightly repairing vacant houses led a 13% drop in gun assaults compared to nearby blocks. These “greening and cleaning” interventions not only reduce gun violence but also provide other benefits, such as reducing the urban heat island effect, lowering residents’ stress levels, and contributing to lower levels of depression among residents.\n\n\n\nArticle\n\n\n\n\n\nGreened lots example\n\n\nImportantly, community residents are already following the data and taking matters into their own hands. This map aims to turn this research into an actionable tool to empower community members to continue making a positive difference in their neighborhoods."
  },
  {
    "objectID": "about.html#methodology",
    "href": "about.html#methodology",
    "title": "About",
    "section": "Methodology",
    "text": "Methodology\nThis map combines data on vacant and abandoned properties from the Department of Licenses and Inspections with Philadelphia Police Department data on gun violence. Additional datasets from a variety of other sources provide more information about each parcel, such as what neighborhood it falls in and whether it’s in the PHS Community LandCare or Philadelphia LandCare programs.\nThe basic methodology is as follows. First, crime data were filtered to include only gun crimes (reported as “aggravated assault firearm” and “robbery firearm” by PPD) in the past year. This follows the research upon which the dashboard is based. These points were then used to calculate a [kernel density estimate] (https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-analyst/how-kernel-density-works.htm) (KDE), which indicates the intensity of gun crime at any point in space. The KDE was then extracted to each vacant parcel to indicate the local level of gun violence. Finally, to make the gun crime rates easier to understand, each parcel was classified by the percentile into which its gun crime score falls. Those interested in a more in-depth understanding of how this map was produced can view the Python code behind the dataset in this GitHub repository.\n\n\n\nKernel density estimate"
  },
  {
    "objectID": "about.html#acknowledgements",
    "href": "about.html#acknowledgements",
    "title": "About",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nMany people helped inform this tool, including residents, CDC leaders, City staff, Penn faculty, and more. Special thanks, however, are due to Dante Leonard for facilitating countless valuable conversations with people throughout Philadelphia, to Mjumbe Poe for serving as my independent study instructor while I built the JavaScript dashboard and website, to Vicky Tam for teaching the GIS class in which I built the first functional version of this tool, and to Dr. Eugenia South for spearheading the original research upon which this tool is based."
  },
  {
    "objectID": "more_info.html",
    "href": "more_info.html",
    "title": "How We Built It",
    "section": "",
    "text": "Based on those conversations, I developed a Python script that classified every vacant property in the City based on priority level and acquisiton process. Priority level was estimated based on the surrounding rate of gun crime and the relative lack of tree canopy cover. One major challenge in this presentation was explaining the concept of a Python script to a non-coder audience; it required me to think creatively about how to represent code in a more intuitive graphic form.\n\n\n\nPriority chart\n\n\nI used a decision tree to suggest the most relevant legal process necessary to intervene in every single property in Philadelphia. Because it deals with sophisticated legal processes, this decision tree is far from final. However, it is a good starting point, and I am in the process of getting further input from organizations and agencies like the Garden Justice Legal Initiative and the Philadelphia Land Bank.\n\n\n\nDecision tree"
  }
]